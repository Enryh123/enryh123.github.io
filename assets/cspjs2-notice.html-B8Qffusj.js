import{_ as s,c as e,f as n,o as a}from"./app-w7Lhdy9s.js";const l={};function t(h,i){return a(),e("div",null,i[0]||(i[0]=[n(`<h2 id="_1-做题前准备" tabindex="-1"><a class="header-anchor" href="#_1-做题前准备"><span>1. 做题前准备</span></a></h2><h3 id="_1-1-windows-要显示扩展名" tabindex="-1"><a class="header-anchor" href="#_1-1-windows-要显示扩展名"><span>1.1 Windows 要显示扩展名</span></a></h3><p>如果不显示扩展名创建的文本文件默认是 <code>.txt</code>的，看起来是 <code>apple.cpp</code>，但是实际是 <code>apple.cpp.txt</code>, 会导致提交失败。</p><h3 id="_1-2-良好的代码规范" tabindex="-1"><a class="header-anchor" href="#_1-2-良好的代码规范"><span>1.2 良好的代码规范</span></a></h3><p>良好的代码规范，比如<strong>变量命名、函数命名、注释、空行分隔不同功能、合理封装函数</strong>等，这些虽然不会影响程序运行，但是能让你在调试的时候少走很多弯路。</p><h3 id="_1-3-打好草稿" tabindex="-1"><a class="header-anchor" href="#_1-3-打好草稿"><span>1.3 打好草稿</span></a></h3><p>做题的时候不要一上来就敲代码，可以在纸上写好思路或者用注释的形式在电脑上把自己的思路写出来，然后再去写代码一步步实现，尤其是模拟这种题目尤为重要，这样能避免思路混乱，做着做着不知道做啥了还可以回去看。</p><h2 id="_2-程序编写注意事项" tabindex="-1"><a class="header-anchor" href="#_2-程序编写注意事项"><span>2. 程序编写注意事项</span></a></h2><h3 id="_2-1-文件输入输出" tabindex="-1"><a class="header-anchor" href="#_2-1-文件输入输出"><span>2.1 文件输入输出</span></a></h3><ul><li>CSP 复赛要求用文件输入输出，一定要确保提交文件中使用 <code>freopen()</code> 进行文件读写。</li><li>开始做题时，可以先写上输入输出文件，然后注释掉，正常去做题，做题检查完毕后，取消注释。</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="文件输入输出" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;bits/stdc++.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">using</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> std</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	freopen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;题目要求的文件名字.in&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;r&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, stdin);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	freopen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;题目要求的文件名字.out&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;w&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, stdout);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	....</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container caution"><p class="hint-container-title">一定要注意！</p><ul><li>代码文件名字是每道题的<strong>英文名字</strong>，每道题都有一个自己的 <code>.cpp</code> 源文件名。比如 <code>power.cpp</code> , <code>live.cpp</code> , <code>expr.cpp</code> , <code>number.cpp</code></li><li><strong>一定要进行文件操作！一定要核对文件名称，没有任何数字，只有英文！一定记得解除注释！</strong></li></ul></div><h3 id="_2-2-注意文件名" tabindex="-1"><a class="header-anchor" href="#_2-2-注意文件名"><span>2.2 注意文件名</span></a></h3><figure><img src="https://enryh-image-1302512306.cos.ap-chongqing.myqcloud.com/picgo/iShot_2024-10-19_13.59.15.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>文件夹名：<code>apple</code></li><li>程序文件名：<code>apple.cpp</code></li><li>输入文件名：<code>apple.in</code></li><li>输出文件名：<code>apple.out</code></li><li>注意：诸如 <code>apple1.in</code>, <code>apple1.ans</code> 这类带有数字的数据，是测试用的，最终提交的程序，文件操作不要有任何数字！！！</li></ul><h3 id="_2-3-输出格式和大小写问题" tabindex="-1"><a class="header-anchor" href="#_2-3-输出格式和大小写问题"><span>2.3 输出格式和大小写问题</span></a></h3><p>注意题目要求每个输出结果在同一行，还是在不同行。或者输出<code>yes</code>,<code>NO</code>,<code>right</code>,<code>impossible</code> 等英文提示时，是否要求首字母大写。</p><h3 id="_2-4-注意保存-不要关机" tabindex="-1"><a class="header-anchor" href="#_2-4-注意保存-不要关机"><span>2.4 注意保存，不要关机</span></a></h3><p>防止突发事件，至少 20 分钟手动保存一次。千万不要关机，否则程序会丢失。</p><h3 id="_2-5-头文件" tabindex="-1"><a class="header-anchor" href="#_2-5-头文件"><span>2.5 头文件</span></a></h3><p>虽然比赛可以使用万能头文件 <code>&lt;bits/stdc++.h&gt;</code>，但是使用万能头文件时，创建变量和使用一些函数时需要格外注意，容易冲突。 如果能记住头文件，建议单独导入，常用头文件如下，一般可以直接写上去：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//STL专用，使用了哪种数据结构，就要用到哪种头文件</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;map&gt;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 键值对形式的关联容器</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;vector&gt;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 动态数组</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;set&gt;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 有序集合</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;queue&gt;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 队列</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;stack&gt;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 栈</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;deque&gt;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 双端队列</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;string&gt;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 字符串</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;bitset&gt;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 二进制位序列</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;list&gt;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 双向链表</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 哈希表实现的键值对形式的无序关联容器，当不需要有序性但需要快速查找时使用</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;unorder_map&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 哈希表实现的无序集合，用于需要快速查找而不需要有序的唯一集合</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;unorder_set&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//C++必备头文件，cin、cout及其相关函数在这里</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;isotream&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//strlen()、strcat()等字符串操作函数在这里</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;cstring&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//sort()、lower_bound()、upper_bound()在这里</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;algorithm&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//log()、sin()、pow()等数学运算的函数在这里</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;cmath&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-6-变量命名冲突" tabindex="-1"><a class="header-anchor" href="#_2-6-变量命名冲突"><span>2.6 变量命名冲突</span></a></h3><p>用了 <code>using namespace std;</code> 之后容易产生的问题是，有些自己的变量名比如<code>time</code>、<code>next</code> 和标准命名空间中的变量名冲突，而且在 Windows 下编译器不报错，但是在 Linux 下会报错。 所以如果需要这几个单词:</p><ol><li>可以使用首字母大写 <code>Time</code>，<code>Next</code></li><li>或者做一下变形，比如 <code>tim</code>，<code>nxt</code></li><li>或者定义成局部变量。</li></ol><p>另外<code>time</code>、<code>next</code>等作为结构体的成员名是没问题的。 全局变量不要使用 <code>y0</code> 、 <code>y1</code> 、 <code>yn</code> 、 <code>j0</code> 、 <code>j1</code> 、 <code>jn</code> ，因为这些变量名称在 C++11 标准库里被定义了，不能再用作全局变量，否则编译会有警告或出错，但是这些变量可以用作局部变量。</p><h3 id="_2-7-变量初始化" tabindex="-1"><a class="header-anchor" href="#_2-7-变量初始化"><span>2.7 变量初始化</span></a></h3><p>变量的初始化常见有两种方式：输入和赋值。在使用变量之前记得要初始化。 如果定义成全局变量，则系统会自动初始化。</p><h3 id="_2-8-数组建议用全局数组" tabindex="-1"><a class="header-anchor" href="#_2-8-数组建议用全局数组"><span>2.8 数组建议用全局数组</span></a></h3><p>全局数组存放在数据区，而局部数组是在栈区的，全局数组可用的内存空间比局部数组可用的内存空间大很多很多。</p><h3 id="_2-9-注意时间和空间限制" tabindex="-1"><a class="header-anchor" href="#_2-9-注意时间和空间限制"><span>2.9 注意时间和空间限制</span></a></h3><p>1 秒内最大循环次数不要超过<strong>1 亿次</strong>。<strong>1 亿次</strong>有可能超时也有可能不超时。但是一两千万次通常不会超时，最好控制在 <code>1e8</code> 这个范围内。 通常题目会限制内存不能超过 256MB 或 512MB。所以要学会估计内存。</p><p>比如全局数组 <code>int a[1000000]</code> 占内存 <code>1000000 * 4 / (1024 * 1024)MB ≈ 4MB</code>。 全局数组的大小通常最好不要超过<strong>1 千万</strong>。</p><p>CSP-J2023 第二轮的第一题，最大的测试数据是 10 亿，<strong>有人把数组开到了 10 亿从而爆 0</strong>， <strong>这是 2023 年入门组爆 0 人数偏多的重要原因之一</strong>。 估算一下 10 亿数组所占的内存空间，假如数组类型是布尔类型，即 <code>bool a[1000000000]</code> ，则占内存 <code>10,0000,0000*1/(1024*1024) ≈ 1000MB ≈ 1G</code> ，这已超过题目的要求 512MB 一倍。 如果是定义成 32 位整型，即 <code>int a[1000000000]</code> ，则占内存约 <code>4G</code> 。</p><h3 id="_2-10-不开-long-long-见祖宗" tabindex="-1"><a class="header-anchor" href="#_2-10-不开-long-long-见祖宗"><span>2.10 不开 long long 见祖宗</span></a></h3><p>内存够用的情况下，开 <code>long long</code> 是非常有必要的：</p><ol><li>防止溢出；</li><li>防止精度丢失。</li><li>测评的机器是 64 位 CPU，一次就可以读取一个<code>long long</code>类型的数据，而读取<code>int</code>类型之后还要再进行切割，所以<code>long long</code>类型的数据读取速度比<code>int</code>更快(32 位 CPU 就反过来了)。</li></ol>`,37)]))}const p=s(l,[["render",t],["__file","cspjs2-notice.html.vue"]]),c=JSON.parse('{"path":"/reference/others/cspjs2-notice.html","title":"CSP复赛注意事项","lang":"zh-CN","frontmatter":{"title":"CSP复赛注意事项","description":"1. 做题前准备 1.1 Windows 要显示扩展名 如果不显示扩展名创建的文本文件默认是 .txt的，看起来是 apple.cpp，但是实际是 apple.cpp.txt, 会导致提交失败。 1.2 良好的代码规范 良好的代码规范，比如变量命名、函数命名、注释、空行分隔不同功能、合理封装函数等，这些虽然不会影响程序运行，但是能让你在调试的时候少走很...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/reference/others/cspjs2-notice.html"}],["meta",{"property":"og:site_name","content":"ENRYH"}],["meta",{"property":"og:title","content":"CSP复赛注意事项"}],["meta",{"property":"og:description","content":"1. 做题前准备 1.1 Windows 要显示扩展名 如果不显示扩展名创建的文本文件默认是 .txt的，看起来是 apple.cpp，但是实际是 apple.cpp.txt, 会导致提交失败。 1.2 良好的代码规范 良好的代码规范，比如变量命名、函数命名、注释、空行分隔不同功能、合理封装函数等，这些虽然不会影响程序运行，但是能让你在调试的时候少走很..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://enryh-image-1302512306.cos.ap-chongqing.myqcloud.com/picgo/iShot_2024-10-19_13.59.15.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-23T05:31:10.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-23T05:31:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CSP复赛注意事项\\",\\"image\\":[\\"https://enryh-image-1302512306.cos.ap-chongqing.myqcloud.com/picgo/iShot_2024-10-19_13.59.15.png\\"],\\"dateModified\\":\\"2024-10-23T05:31:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Enryh\\"}]}"]]},"headers":[{"level":2,"title":"1. 做题前准备","slug":"_1-做题前准备","link":"#_1-做题前准备","children":[{"level":3,"title":"1.1 Windows 要显示扩展名","slug":"_1-1-windows-要显示扩展名","link":"#_1-1-windows-要显示扩展名","children":[]},{"level":3,"title":"1.2 良好的代码规范","slug":"_1-2-良好的代码规范","link":"#_1-2-良好的代码规范","children":[]},{"level":3,"title":"1.3 打好草稿","slug":"_1-3-打好草稿","link":"#_1-3-打好草稿","children":[]}]},{"level":2,"title":"2. 程序编写注意事项","slug":"_2-程序编写注意事项","link":"#_2-程序编写注意事项","children":[{"level":3,"title":"2.1 文件输入输出","slug":"_2-1-文件输入输出","link":"#_2-1-文件输入输出","children":[]},{"level":3,"title":"2.2 注意文件名","slug":"_2-2-注意文件名","link":"#_2-2-注意文件名","children":[]},{"level":3,"title":"2.3 输出格式和大小写问题","slug":"_2-3-输出格式和大小写问题","link":"#_2-3-输出格式和大小写问题","children":[]},{"level":3,"title":"2.4 注意保存，不要关机","slug":"_2-4-注意保存-不要关机","link":"#_2-4-注意保存-不要关机","children":[]},{"level":3,"title":"2.5 头文件","slug":"_2-5-头文件","link":"#_2-5-头文件","children":[]},{"level":3,"title":"2.6 变量命名冲突","slug":"_2-6-变量命名冲突","link":"#_2-6-变量命名冲突","children":[]},{"level":3,"title":"2.7 变量初始化","slug":"_2-7-变量初始化","link":"#_2-7-变量初始化","children":[]},{"level":3,"title":"2.8 数组建议用全局数组","slug":"_2-8-数组建议用全局数组","link":"#_2-8-数组建议用全局数组","children":[]},{"level":3,"title":"2.9 注意时间和空间限制","slug":"_2-9-注意时间和空间限制","link":"#_2-9-注意时间和空间限制","children":[]},{"level":3,"title":"2.10 不开 long long 见祖宗","slug":"_2-10-不开-long-long-见祖宗","link":"#_2-10-不开-long-long-见祖宗","children":[]}]}],"git":{"createdTime":1729350313000,"updatedTime":1729661470000,"contributors":[{"name":"Enryh","email":"enryh123@outlook.com","commits":1}]},"readingTime":{"minutes":5.24,"words":1571},"filePathRelative":"reference/others/cspjs2-notice.md","localizedDate":"2024年10月19日","autoDesc":true}');export{p as comp,c as data};
